# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install dependencies
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: uv sync
        env:
          PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1
      - uses: astral-sh/ruff-action@v3
      - name: Check code style and Type Hint
        run: |
          uv run fast check --skip-mypy
          uv run mypy .
      - name: Verify pip conf script
        run: ./pip_conf.py
      - name: Verify python upgrade script
        run: |
          ./upgrade_py.py --list
          ./upgrade_py.py --dry --no-input
          ./upgrade_py.py 3 --dry --no-input
          ./upgrade_py.py 313 --dry --no-input
          ./upgrade_py.py 3.13 --dry --no-input
          ./upgrade_py.py 3.13.2 --dry --no-input
          ./upgrade_py.py --version=313 --dry --no-input

  ConfPip:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, '3.10', 3.11, 3.12, 3.13]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Verify pip conf script
        run: python pip_conf.py
      - name: Verify python upgrade script
        run: python upgrade_py.py --dry --no-input

  conf_pip_py27:
    runs-on: ubuntu-latest
    container: python:2.7
    steps:
      - uses: actions/checkout@v4
      - name: Verify pip conf script
        run: |
          python2.7 pip_conf.py
          python2.7 upgrade_py.py --dry --no-input
          python2.7 -V
      - uses: actions/setup-python@v5
      - name: setup pdm
        run: |
          pip3 install --upgrade pip pipx
          ~/.local/bin/pipx ensurepath
          pipx install pdm
      - uses: astral-sh/setup-uv@v5
      - uses: abatilo/actions-poetry@v3
      - name: Check mirror setting for uv/pdm/poetry
        run: |
          python2.7 pip_conf.py --pdm
          python2.7 pip_conf.py --poetry
          python2.7 pip_conf.py --uv
      - name: Verify mirror work
        run: |
          pdm add pytz
          poetry add six
          uv add tomli

  set_pip_mirror:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - name: Verify mirror setting
        run: |
          python pip_conf.py
          pip install --user --upgrade pip
      - uses: pdm-project/setup-pdm@v3
      - uses: astral-sh/setup-uv@v5
      - uses: abatilo/actions-poetry@v3
      - name: Check mirror setting for uv/pdm/poetry
        run: |
          ./pip_conf.py --pdm
          ./pip_conf.py --poetry
          ./pip_conf.py --uv
      - name: Verify mirror work
        run: |
          pdm add pytz
          poetry add six
          uv add tomli --frozen
          uv pip install tomlkit
